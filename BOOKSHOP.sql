drop table ASSORTYMENT cascade constraints;
drop table BOOKS cascade constraints;
drop table BOOKSHOPS cascade constraints;
drop table CITY cascade constraints;
drop table CUSTOMERS cascade constraints;
drop table EDUCATION cascade constraints;
drop table HISTORY cascade constraints;
drop table JOB_TITLES cascade constraints;
drop table WORKERS cascade constraints;

drop table LOG_TABLE_GENERAL cascade constraints;
drop table LOG_TABLE_ASSORTYMENT cascade constraints;
drop table LOG_TABLE_BOOKS cascade constraints;
drop table LOG_TABLE_CUSTOMERS cascade constraints;
drop table LOG_TABLE_HISTORY cascade constraints;

drop view BOOKS_VIEW;
drop view BOOKSHOPS_VIEW;
drop view HISTORY_VIEW;

drop user boss cascade;
drop user manager;

CREATE TABLE ASSORTYMENT
(
    ID_BOOK VARCHAR2(20 CHAR) not null,
    ID_BOOKSHOP NUMBER(10,0) not null,
    AMOUNT NUMBER(10,0) not null
);

CREATE TABLE BOOKS
(
    ID_BOOK VARCHAR2(20 CHAR) not null,
    TITLE VARCHAR2(20 CHAR),
    AUTHOR VARCHAR2(40 CHAR),
    PUBLISHING_HOUSE VARCHAR2(20 CHAR),
    GENRE VARCHAR2(10 CHAR),
    PRICE NUMBER(6,2),
    primary key (ID_BOOK)
);

CREATE TABLE BOOKSHOPS
(   
    ID_BOOKSHOP NUMBER(10,0) not null,
    SHOP_NAME VARCHAR2(20 CHAR),
    TEL_NUMBER VARCHAR2(9 CHAR),
    ID_CITY NUMBER(10,0) not null,
    STREET_NAME VARCHAR2(30 CHAR) not null,
    BUILDING_NUMBER NUMBER(10,0) not null,
    primary key (ID_BOOKSHOP)
);

CREATE TABLE CITY
(
    ID_CITY NUMBER(10,0) not null,
    CITY_NAME VARCHAR2(40 CHAR) not null,
    primary key (ID_CITY)
);

CREATE TABLE CUSTOMERS
(
    ID_CUSTOMER NUMBER(10,0) not null,
    FIRST_NAME VARCHAR2(20 CHAR) not null,
    LAST_NAME VARCHAR2(20 CHAR) not null,
    EMAIL VARCHAR2(30 CHAR),
    TEL_NUMBER VARCHAR2(9 CHAR),
    CARD VARCHAR2(5 CHAR) not null,
    primary key (ID_CUSTOMER)
);

CREATE TABLE EDUCATION
(   
    ID_EDUCATION NUMBER(10,0) not null,
    LEVEL_OF_EDUCATION VARCHAR2(20 CHAR) not null,
    ID_CITY NUMBER(10,0) not null,
    primary key(ID_EDUCATION)
);

CREATE TABLE HISTORY
(
    ID_HISTORY NUMBER(10,0) not null,
    ID_CUSTOMER NUMBER(10,0),
    ID_BOOKSHOP NUMBER(10,0),
    ID_BOOK VARCHAR2(20 CHAR) not null,
    PURCHASE_DATE DATE,
    FINAL_PRICE NUMBER(6,2),
    primary key (ID_HISTORY)
);

CREATE TABLE JOB_TITLES
(
    ID_JOB_TITLE NUMBER(3,0) not null,
    JOB_TITLE VARCHAR2(20 CHAR) not null,
    MIN_SALARY NUMBER(8,2),
    MAX_SALARY NUMBER(8,2),
    MIN_EDUCATION VARCHAR2(20 CHAR),
    MIN_EXPERIENCE NUMBER(2,0) not null,
    primary key (ID_JOB_TITLE)
);

CREATE TABLE WORKERS
(
    ID_WORKER NUMBER(10,0) not null,
    ID_BOOKSHOP NUMBER(10,0),
    ID_EDUCATION NUMBER(10,0),
    ID_JOB_TITLE NUMBER(10,0) not null,
    SALARY NUMBER(8,2) not null,    
    FIRST_NAME VARCHAR2(20 CHAR) not null,
    LAST_NAME VARCHAR2(20 CHAR) not null,
    EXPERIENCE NUMBER(2,0) not null,
    primary key (ID_WORKER)
);
--------------------------
--VIEW TABLES
--------------------------
CREATE VIEW BOOKS_VIEW AS
SELECT bs.SHOP_NAME,c.CITY_NAME, bs.STREET_NAME, b.TITLE, b.AUTHOR, b.GENRE, b.PRICE, aa.AMOUNT
FROM ((BOOKSHOPS bs JOIN ASSORTYMENT aa ON bs.ID_BOOKSHOP=aa.ID_BOOKSHOP) 
JOIN BOOKS b ON b.ID_BOOK=aa.ID_BOOK)
JOIN CITY c ON bs.ID_CITY=c.ID_CITY;

CREATE VIEW BOOKSHOPS_VIEW AS
SELECT bs.SHOP_NAME, c.CITY_NAME, bs.STREET_NAME, bs.BUILDING_NUMBER, bs.TEL_NUMBER 
FROM BOOKSHOPS bs JOIN CITY c ON bs.ID_CITY=c.ID_CITY;

CREATE VIEW HISTORY_VIEW AS
SELECT h.ID_CUSTOMER, b.ID_BOOK, b.TITLE, h.FINAL_PRICE, h.PURCHASE_DATE
FROM BOOKS b JOIN HISTORY h ON b.ID_BOOK=h.ID_BOOK;

--------------------------
--FK'S
--------------------------
alter table ASSORTYMENT
    add constraint ASSORT_BS_FK
    foreign key (ID_BOOKSHOP)
    references BOOKSHOPS;
    
alter table ASSORTYMENT
    add constraint ASSORT_BOOK_FK
    foreign key (ID_BOOK)
    references BOOKS;
    
alter table BOOKSHOPS
    add constraint BS_CITY_FK
    foreign key (ID_CITY)
    references CITY;
    
alter table EDUCATION  
    add constraint EDU_CITY_FK
    foreign key (ID_CITY)
    references CITY;
    
alter table HISTORY
    add constraint HISTORY_BS_FK
    foreign key (ID_BOOKSHOP)
    references BOOKSHOPS;
    
alter table HISTORY
    add constraint HISTORY_BOOK_FK
    foreign key (ID_BOOK)
    references BOOKS;
    
alter table HISTORY
    add constraint HISTORY_CUSTOMER_FK
    foreign key (ID_CUSTOMER)
    references CUSTOMERS;
    
alter table WORKERS
    add constraint WORKER_BS_FK
    foreign key (ID_BOOKSHOP)
    references BOOKSHOPS;
    
alter table WORKERS
    add constraint WORKER_TITLE_FK
    foreign key (ID_JOB_TITLE)
    references JOB_TITLES;
    
alter table WORKERS
    add constraint WORKER_EDU_FK
    foreign key (ID_EDUCATION)
    references EDUCATION;

----------------------------------
--LOG TABLES
----------------------------------
CREATE TABLE LOG_TABLE_GENERAL
(
    WHO VARCHAR2(30 CHAR),
    WHICH VARCHAR2(20 CHAR),
    INSTRUCTION VARCHAR2(9 CHAR),
    LOGDATE TIMESTAMP
);

CREATE TABLE LOG_TABLE_ASSORTYMENT
(
    ID_BOOK VARCHAR2(20 CHAR) not null,
    ID_BOOKSHOP NUMBER(10,0) not null,
    AMOUNT NUMBER(10,0) not null,
    OLD_AMOUNT NUMBER(10,0)
);

CREATE TABLE LOG_TABLE_BOOKS
(
    ID_BOOK VARCHAR2(20 CHAR) not null,
    PRICE NUMBER(6,2),
    OLD_PRICE NUMBER(6,2),
    PUBLISHING_HOUSE VARCHAR2(20 CHAR),
    OLD_PH VARCHAR2(20 CHAR)
);

CREATE TABLE LOG_TABLE_CUSTOMERS
(
    ID_CUSTOMER NUMBER(10,0) not null,
    EMAIL VARCHAR2(30 CHAR),
    OLD_EMAIL VARCHAR2(30 CHAR),
    TEL_NUMBER VARCHAR2(9 CHAR),
    OLD_TN VARCHAR2(9 CHAR),
    CARD VARCHAR2(5 CHAR),
    OLD_CARD VARCHAR2(5 CHAR)
);

CREATE TABLE LOG_TABLE_HISTORY
(
    ID_HISTORY NUMBER(10,0) not null,
    ID_CUSTOMER NUMBER(10,0),
    OLD_ID_CUSTOMER NUMBER(10,0),
    ID_BOOK VARCHAR2(20 CHAR),
    OLD_ID_BOOK VARCHAR2(20 CHAR)
);
----------------------------------
--TRIGGERS FOR LOGS
----------------------------------

--TRIGGERS FOR GENERAL LOG TABLE
CREATE OR REPLACE TRIGGER ASSORTYMENT_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON ASSORTYMENT
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'ASSORTYMENT','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'ASSORTYMENT','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'ASSORTYMENT','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER BOOKS_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON BOOKS
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'BOOKS','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'BOOKS','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'BOOKS','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER BOOKSHOPS_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON BOOKSHOPS
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'BOOKSHOPS','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'BOOKSHOPS','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'BOOKSHOPS','DELETING',SYSTIMESTAMP);
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER CITY_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON CITY
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'CITY','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'CITY','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'CITY','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER CUSTOMERS_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON CUSTOMERS
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'CUSTOMERS','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'CUSTOMERS','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'CUSTOMERS','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER EDUCATION_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON EDUCATION
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'EDUCATION','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'EDUCATION','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'EDUCATION','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER HISTORY_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON HISTORY
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'HISTORY','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'HISTORY','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'HISTORY','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TITLES_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON JOB_TITLES
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'JOB_TITLES','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'JOB_TITLES','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'JOB_TITLES','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER WORKERS_LOG
    BEFORE INSERT OR UPDATE OR DELETE
    ON WORKERS
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'WORKERS','INSERTING',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'WORKERS','UPDATING',SYSTIMESTAMP);
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_GENERAL(WHO,WHICH,INSTRUCTION,LOGDATE) 
            VALUES(USER,'WORKERS','DELETING',SYSTIMESTAMP);
    END IF;
END;
/

--TRIGER FOR ASSORTYMENT LOG TABLE
CREATE OR REPLACE TRIGGER ASSORTYMENT_LOG_ALL
    BEFORE INSERT OR UPDATE
    ON ASSORTYMENT
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_ASSORTYMENT(ID_BOOK, ID_BOOKSHOP, AMOUNT) 
            VALUES(:NEW.ID_BOOK, :NEW.ID_BOOKSHOP, :NEW.AMOUNT);
    ELSIF UPDATING THEN
        IF :NEW.AMOUNT != :OLD.AMOUNT THEN
            INSERT INTO LOG_TABLE_ASSORTYMENT(ID_BOOK, ID_BOOKSHOP, AMOUNT, OLD_AMOUNT) 
                VALUES(:NEW.ID_BOOK, :NEW.ID_BOOKSHOP, :NEW.AMOUNT, :OLD.AMOUNT);
        END IF;
    END IF;
END;
/

--TRIGGER FOR BOOK LOG TABLE
CREATE OR REPLACE TRIGGER BOOKS_LOG_ALL
    BEFORE INSERT OR UPDATE OR DELETE
    ON BOOKS
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_BOOKS(ID_BOOK, PRICE, PUBLISHING_HOUSE) 
            VALUES(:NEW.ID_BOOK, :NEW.PRICE, :NEW.PUBLISHING_HOUSE);
    ELSIF UPDATING THEN
        IF :NEW.PRICE != :OLD.PRICE AND :NEW.PUBLISHING_HOUSE != :OLD.PUBLISHING_HOUSE THEN
            INSERT INTO LOG_TABLE_BOOKS(ID_BOOK, PRICE, OLD_PRICE, PUBLISHING_HOUSE, OLD_PH) 
                VALUES(:NEW.ID_BOOK, :NEW.PRICE, :OLD.PRICE, :NEW.PUBLISHING_HOUSE, :OLD.PUBLISHING_HOUSE);
        ELSIF :NEW.PRICE != :OLD.PRICE THEN
            INSERT INTO LOG_TABLE_BOOKS(ID_BOOK, PRICE, OLD_PRICE) 
                VALUES(:NEW.ID_BOOK, :NEW.PRICE, :OLD.PRICE);
        ELSIF :NEW.PUBLISHING_HOUSE != :OLD.PUBLISHING_HOUSE THEN
            INSERT INTO LOG_TABLE_BOOKS(ID_BOOK, PUBLISHING_HOUSE, OLD_PH) 
                VALUES(:NEW.ID_BOOK, :NEW.PUBLISHING_HOUSE, :OLD.PUBLISHING_HOUSE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_BOOKS(ID_BOOK, OLD_PRICE, OLD_PH) 
            VALUES(:OLD.ID_BOOK, :OLD.PRICE, :OLD.PUBLISHING_HOUSE);
    END IF;
END;
/

--TRIGGER FOR CUSTOMER LOG TABLE
CREATE OR REPLACE TRIGGER CUSTOMER_LOG_ALL
    BEFORE INSERT OR UPDATE
    ON CUSTOMERS
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, EMAIL, TEL_NUMBER, CARD) 
            VALUES(:NEW.ID_CUSTOMER, :NEW.EMAIL, :NEW.TEL_NUMBER, :NEW.CARD);
    ELSIF UPDATING THEN
        IF :NEW.EMAIL != :OLD.EMAIL AND :NEW.TEL_NUMBER != :OLD.TEL_NUMBER AND :NEW.CARD != :OLD.CARD THEN
            INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, EMAIL, OLD_EMAIL, TEL_NUMBER, OLD_TN, CARD, OLD_CARD) 
                VALUES(:NEW.ID_CUSTOMER, :NEW.EMAIL, :OLD.EMAIL, :NEW.TEL_NUMBER, :OLD.TEL_NUMBER, :NEW.CARD, :OLD.CARD);
        ELSIF  :NEW.EMAIL != :OLD.EMAIL AND :NEW.TEL_NUMBER != :OLD.TEL_NUMBER THEN
            INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, EMAIL, OLD_EMAIL, TEL_NUMBER, OLD_TN) 
                VALUES(:NEW.ID_CUSTOMER, :NEW.EMAIL, :OLD.EMAIL, :NEW.TEL_NUMBER, :OLD.TEL_NUMBER);
        ELSIF :NEW.EMAIL != :OLD.EMAIL AND :NEW.CARD != :OLD.CARD THEN
            INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, EMAIL, OLD_EMAIL, CARD, OLD_CARD) 
                VALUES(:NEW.ID_CUSTOMER, :NEW.EMAIL, :OLD.EMAIL, :NEW.CARD, :OLD.CARD);
        ELSIF :NEW.TEL_NUMBER != :OLD.TEL_NUMBER AND :NEW.CARD != :OLD.CARD THEN
            INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, TEL_NUMBER, OLD_TN, CARD, OLD_CARD) 
                VALUES(:NEW.ID_CUSTOMER, :NEW.TEL_NUMBER, :OLD.TEL_NUMBER, :NEW.CARD, :OLD.CARD);
        ELSIF :NEW.EMAIL != :OLD.EMAIL THEN
            INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, EMAIL, OLD_EMAIL) 
                VALUES(:NEW.ID_CUSTOMER, :NEW.EMAIL, :OLD.EMAIL);
        ELSIF :NEW.TEL_NUMBER != :OLD.TEL_NUMBER THEN
            INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, TEL_NUMBER, OLD_TN) 
                VALUES(:NEW.ID_CUSTOMER, :NEW.TEL_NUMBER, :OLD.TEL_NUMBER);
        ELSIF :NEW.CARD != :OLD.CARD THEN
            INSERT INTO LOG_TABLE_CUSTOMERS(ID_CUSTOMER, CARD, OLD_CARD) 
                VALUES(:NEW.ID_CUSTOMER, :NEW.CARD, :OLD.CARD);
        END IF;
    END IF; 
END;
/

--TRIGGER FOR HISTORY LOG TABLE
CREATE OR REPLACE TRIGGER HISTORY_LOG_ALL
    BEFORE INSERT OR UPDATE OR DELETE
    ON HISTORY
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LOG_TABLE_HISTORY(ID_HISTORY, ID_CUSTOMER, ID_BOOK) 
            VALUES(:NEW.ID_HISTORY, :NEW.ID_CUSTOMER, :NEW.ID_BOOK);
    ELSIF UPDATING THEN
        IF :NEW.ID_CUSTOMER != :OLD.ID_CUSTOMER AND :NEW.ID_BOOK != :OLD.ID_BOOK THEN
            INSERT INTO LOG_TABLE_HISTORY(ID_HISTORY, ID_CUSTOMER, OLD_ID_CUSTOMER, ID_BOOK, OLD_ID_BOOK) 
                VALUES(:NEW.ID_HISTORY, :NEW.ID_CUSTOMER, :OLD.ID_CUSTOMER, :NEW.ID_BOOK, :OLD.ID_BOOK);
        ELSIF :NEW.ID_CUSTOMER != :OLD.ID_CUSTOMER THEN
            INSERT INTO LOG_TABLE_HISTORY(ID_HISTORY, ID_CUSTOMER, OLD_ID_CUSTOMER) 
                VALUES(:NEW.ID_HISTORY, :NEW.ID_CUSTOMER, :OLD.ID_CUSTOMER);
        ELSIF :NEW.ID_BOOK != :OLD.ID_BOOK THEN
            INSERT INTO LOG_TABLE_HISTORY(ID_HISTORY, ID_BOOK, OLD_ID_BOOK) 
                VALUES(:NEW.ID_HISTORY, :NEW.ID_BOOK, :OLD.ID_BOOK);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG_TABLE_HISTORY(ID_HISTORY, OLD_ID_CUSTOMER, OLD_ID_BOOK) 
            VALUES(:OLD.ID_HISTORY, :OLD.ID_CUSTOMER, :OLD.ID_BOOK);
    END IF;
END;
/
----------------------------------
--TRIGGERS, ALTERS
----------------------------------

--card can be only true or false
alter table CUSTOMERS
    add constraint CHECK_CARD
    check (CARD = 'TRUE' OR CARD = 'FALSE');

--FINAL PRICE CHANGE
CREATE OR REPLACE TRIGGER FINAL_PRICE_CHANGE
    BEFORE INSERT OR UPDATE
    ON HISTORY
    FOR EACH ROW
BEGIN
    DECLARE TEMP_PRICE NUMBER(6,2);
            TEMP_CARD VARCHAR2(5 CHAR);
    BEGIN
        SELECT PRICE INTO TEMP_PRICE FROM BOOKS WHERE ID_BOOK=:NEW.ID_BOOK;
        SELECT CARD INTO TEMP_CARD FROM CUSTOMERS WHERE ID_CUSTOMER=:NEW.ID_CUSTOMER;
        IF TEMP_CARD='TRUE' THEN
            :NEW.FINAL_PRICE := TEMP_PRICE*0.95;
        ELSE
            :NEW.FINAL_PRICE := TEMP_PRICE;
        END IF;
    END;
END;
/

--TRIGGER THAT CHANGES AMOUNT 
CREATE OR REPLACE TRIGGER AMOUNT_CHANGES
    BEFORE INSERT OR UPDATE OR DELETE
    ON HISTORY
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        UPDATE ASSORTYMENT SET AMOUNT = AMOUNT - 1
        WHERE ID_BOOK=:NEW.ID_BOOK AND ID_BOOKSHOP=:NEW.ID_BOOKSHOP;
    ELSIF UPDATING THEN
        UPDATE ASSORTYMENT SET AMOUNT = AMOUNT - 1
        WHERE ID_BOOK=:NEW.ID_BOOK AND ID_BOOKSHOP=:NEW.ID_BOOKSHOP;
        UPDATE ASSORTYMENT SET AMOUNT = AMOUNT + 1
        WHERE ID_BOOK=:OLD.ID_BOOK AND ID_BOOKSHOP=:OLD.ID_BOOKSHOP;
    ELSIF DELETING THEN
        UPDATE ASSORTYMENT SET AMOUNT = AMOUNT + 1
        WHERE ID_BOOK=:OLD.ID_BOOK AND ID_BOOKSHOP=:OLD.ID_BOOKSHOP;
    END IF;
END;
/

--CHECK IF AVAILABLE
CREATE OR REPLACE TRIGGER AMOUNT_CHECK
    BEFORE INSERT
    ON HISTORY
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_AMOUNT NUMBER;
            BEGIN
                SELECT AMOUNT INTO TEMP_AMOUNT FROM ASSORTYMENT WHERE ID_BOOK=:NEW.ID_BOOK AND ID_BOOKSHOP=:NEW.ID_BOOKSHOP;
                IF TEMP_AMOUNT<=0 THEN
                    raise_application_error(-20000,'NIE MOZNA KUPIC KSIAZKI KTORA NIE JEST DOSTEPNA.');
                END IF;
            END;
    END IF;
END;
/

--SALARY
CREATE OR REPLACE TRIGGER SALARY_CHECK
    BEFORE INSERT OR UPDATE
    ON WORKERS
    FOR EACH ROW
BEGIN
    DECLARE TEMP_MAX NUMBER(8,2);
            TEMP_MIN NUMBER(8,2);
        BEGIN
            SELECT MAX_SALARY INTO TEMP_MAX FROM JOB_TITLES WHERE ID_JOB_TITLE=:NEW.ID_JOB_TITLE;
            SELECT MIN_SALARY INTO TEMP_MIN FROM JOB_TITLES WHERE ID_JOB_TITLE=:NEW.ID_JOB_TITLE;
            
            IF :NEW.SALARY > TEMP_MAX THEN
                raise_application_error(-20002,'WYNAGRODZENIE JEST ZA WYSOKIE');
            ELSIF :NEW.SALARY < TEMP_MIN THEN
                raise_application_error(-20003,'WYNAGRODZENIE JEST ZA NISKIE');
            END IF;
        END;
END;
/

--EDUCATION AND EXPIRIENCE CHECK
CREATE OR REPLACE TRIGGER EDUCATION_AND_EXPIRIENCE_CHECK
    BEFORE INSERT
    ON WORKERS
    FOR EACH ROW
BEGIN
    DECLARE TEMP_EDU VARCHAR2(20 CHAR);
            TEMP_MIN_EDU VARCHAR2(20 CHAR);
            TEMP_EXP NUMBER;
    BEGIN
        IF :NEW.ID_EDUCATION IS NOT NULL THEN
            SELECT LEVEL_OF_EDUCATION INTO TEMP_EDU FROM EDUCATION WHERE ID_EDUCATION = :NEW.ID_EDUCATION;
        ELSE
            TEMP_EDU := NULL;
        END IF;
        SELECT MIN_EDUCATION INTO TEMP_MIN_EDU FROM JOB_TITLES WHERE ID_JOB_TITLE = :NEW.ID_JOB_TITLE;
        SELECT MIN_EXPERIENCE INTO TEMP_EXP FROM JOB_TITLES WHERE ID_JOB_TITLE = :NEW.ID_JOB_TITLE;
        IF (TEMP_MIN_EDU = 'WYZSZE' AND TEMP_EDU != 'WYZSZE') OR (TEMP_EXP > :NEW.EXPERIENCE) THEN
            raise_application_error(-20006,'NIE MOZNA ZATRUDNIC NA TO STANOWISKO');
        ELSIF (TEMP_MIN_EDU = 'SREDNIE' AND TEMP_EDU = NULL) OR (TEMP_EXP > :NEW.EXPERIENCE) THEN
            raise_application_error(-20006,'NIE MOZNA ZATRUDNIC NA TO STANOWISKO');
        END IF;
    END;
END;
/

--ADD BOOK - ADD TO ADD TO EVERY BS
CREATE OR REPLACE TRIGGER CHANGE_ASSORT_INSERT_BOOKS
    AFTER INSERT
    ON BOOKS
    FOR EACH ROW
BEGIN
    DECLARE TEMP_NB NUMBER;
            TEMP_EXIST NUMBER;
        BEGIN
            SELECT MAX(ID_BOOKSHOP) INTO TEMP_NB FROM BOOKSHOPS;
            IF TEMP_NB IS NOT NULL THEN
                FOR i IN 1..TEMP_NB LOOP
                    SELECT COUNT(ID_BOOKSHOP) INTO TEMP_EXIST FROM BOOKSHOPS WHERE ID_BOOKSHOP = i;
                    IF TEMP_EXIST != 0 THEN
                        INSERT INTO ASSORTYMENT(ID_BOOK, ID_BOOKSHOP, AMOUNT)
                            VALUES(:NEW.ID_BOOK, i, 0);
                    END IF;
                END LOOP;
            END IF;
        END;
END;
/

--ADD BOOKSHOP - 
CREATE OR REPLACE TRIGGER CHANGE_ASSORT_INSERT_BS
    AFTER INSERT
    ON BOOKSHOPS
    FOR EACH ROW
BEGIN
    DECLARE TEMP_NB NUMBER;
            TEMP_EXIST NUMBER;
        BEGIN
            SELECT MAX(ID_BOOK) INTO TEMP_NB FROM BOOKS;
            IF TEMP_NB IS NOT NULL THEN
                FOR i IN 1..TEMP_NB LOOP
                    SELECT COUNT(ID_BOOK) INTO TEMP_EXIST FROM BOOKS WHERE ID_BOOK = i;
                    IF TEMP_EXIST != 0 THEN
                        INSERT INTO ASSORTYMENT(ID_BOOK, ID_BOOKSHOP, AMOUNT)
                            VALUES(i, :NEW.ID_BOOKSHOP, 0);
                    END IF;
                END LOOP;
            END IF;
        END;
END;
/

--ENABLE DELETING BOOK IF IS NOT IN HISTORY AND IN ASSORTYMENT
CREATE OR REPLACE TRIGGER BOOK_DELETE
    BEFORE DELETE
    ON BOOKS
    FOR EACH ROW
BEGIN
    DECLARE TEMP_IN_HIST NUMBER;
            TEMP_SUM_ASSORT NUMBER;
    BEGIN
        SELECT COUNT(ID_HISTORY) INTO TEMP_IN_HIST FROM HISTORY WHERE ID_BOOK=:OLD.ID_BOOK;
        SELECT SUM(AMOUNT) INTO TEMP_SUM_ASSORT FROM ASSORTYMENT WHERE ID_BOOK=:OLD.ID_BOOK;
        IF TEMP_IN_HIST = 0 AND TEMP_SUM_ASSORT = 0 THEN
            DELETE FROM ASSORTYMENT WHERE ID_BOOK = :OLD.ID_BOOK;
        ELSE
            raise_application_error(-20001,'NIE MOZNA USUNAC TEJ KSIAZKI');
        END IF;
    END;
END;
/

--DISABLE DELETING CUSTOMER
CREATE OR REPLACE TRIGGER CUST_DELETE_PREV
    BEFORE DELETE
    ON CUSTOMERS
    FOR EACH ROW
BEGIN
    raise_application_error(-20004,'NIE MOZNA USUNAC KLIENTA');
END;
/

--DELETE BOOKSHOP
CREATE OR REPLACE TRIGGER BS_DELETE
    BEFORE DELETE
    ON BOOKSHOPS
    FOR EACH ROW
BEGIN
    UPDATE HISTORY SET ID_BOOKSHOP = NULL WHERE ID_BOOKSHOP = :OLD.ID_BOOKSHOP;
    DELETE FROM ASSORTYMENT WHERE ID_BOOKSHOP = :OLD.ID_BOOKSHOP;
    DELETE FROM WORKERS WHERE ID_BOOKSHOP = :OLD.ID_BOOKSHOP;
END;
/

--IDs
CREATE OR REPLACE TRIGGER BOOKSHOPS_ID
    BEFORE INSERT OR UPDATE
    ON BOOKSHOPS
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_MAX_ID NUMBER;
        BEGIN
            SELECT MAX(ID_BOOKSHOP) INTO TEMP_MAX_ID FROM BOOKSHOPS;
            IF TEMP_MAX_ID IS NULL THEN TEMP_MAX_ID := 0; END IF;
            :NEW.ID_BOOKSHOP := TEMP_MAX_ID+1;
        END;
    ELSIF UPDATING THEN
        IF :NEW.ID_BOOKSHOP != :OLD.ID_BOOKSHOP THEN
            raise_application_error(-20005,'NIE MOZNA ZMIENIAC ID');
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER CITY_ID
    BEFORE INSERT OR UPDATE
    ON CITY
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_MAX_ID NUMBER;
        BEGIN
            SELECT MAX(ID_CITY) INTO TEMP_MAX_ID FROM CITY;
            IF TEMP_MAX_ID IS NULL THEN TEMP_MAX_ID := 0; END IF;
            :NEW.ID_CITY := TEMP_MAX_ID+1;
        END;
    ELSIF UPDATING THEN
        IF :NEW.ID_CITY != :OLD.ID_CITY THEN
            raise_application_error(-20005,'NIE MOZNA ZMIENIAC ID');
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER CUSTOMERS_ID
    BEFORE INSERT OR UPDATE
    ON CUSTOMERS
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_MAX_ID NUMBER;
        BEGIN
            SELECT MAX(ID_CUSTOMER) INTO TEMP_MAX_ID FROM CUSTOMERS;
            IF TEMP_MAX_ID IS NULL THEN TEMP_MAX_ID := 0; END IF;
            :NEW.ID_CUSTOMER := TEMP_MAX_ID+1;
        END;
    ELSIF UPDATING THEN
        IF :NEW.ID_CUSTOMER != :OLD.ID_CUSTOMER THEN
            raise_application_error(-20005,'NIE MOZNA ZMIENIAC ID');
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER EDUCATION_ID
    BEFORE INSERT OR UPDATE
    ON EDUCATION
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_MAX_ID NUMBER;
        BEGIN
            SELECT MAX(ID_EDUCATION) INTO TEMP_MAX_ID FROM EDUCATION;
            IF TEMP_MAX_ID IS NULL THEN TEMP_MAX_ID := 0; END IF;
            :NEW.ID_EDUCATION := TEMP_MAX_ID+1;
        END;
    ELSIF UPDATING THEN
        IF :NEW.ID_EDUCATION != :OLD.ID_EDUCATION THEN
            raise_application_error(-20005,'NIE MOZNA ZMIENIAC ID');
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER HISTORY_ID
    BEFORE INSERT OR UPDATE
    ON HISTORY
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_MAX_ID NUMBER;
        BEGIN
            SELECT MAX(ID_HISTORY) INTO TEMP_MAX_ID FROM HISTORY;
            IF TEMP_MAX_ID IS NULL THEN TEMP_MAX_ID := 0; END IF;
            :NEW.ID_HISTORY := TEMP_MAX_ID+1;
        END;
    ELSIF UPDATING THEN
        IF :NEW.ID_HISTORY != :OLD.ID_HISTORY THEN
            raise_application_error(-20005,'NIE MOZNA ZMIENIAC ID');
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER JOB_TITLES_ID
    BEFORE INSERT OR UPDATE
    ON JOB_TITLES
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_MAX_ID NUMBER;
        BEGIN
            SELECT MAX(ID_JOB_TITLE) INTO TEMP_MAX_ID FROM JOB_TITLES;
            IF TEMP_MAX_ID IS NULL THEN TEMP_MAX_ID := 0; END IF;
            :NEW.ID_JOB_TITLE := TEMP_MAX_ID+1;
        END;
    ELSIF UPDATING THEN
        IF :NEW.ID_JOB_TITLE != :OLD.ID_JOB_TITLE THEN
            raise_application_error(-20005,'NIE MOZNA ZMIENIAC ID');
        END IF;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER WORKERS_ID
    BEFORE INSERT OR UPDATE
    ON WORKERS
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DECLARE TEMP_MAX_ID NUMBER;
        BEGIN
            SELECT MAX(ID_WORKER) INTO TEMP_MAX_ID FROM WORKERS;
            IF TEMP_MAX_ID IS NULL THEN TEMP_MAX_ID := 0; END IF;
            :NEW.ID_WORKER := TEMP_MAX_ID+1;
        END;
    ELSIF UPDATING THEN
        IF :NEW.ID_WORKER != :OLD.ID_WORKER THEN
            raise_application_error(-20005,'NIE MOZNA ZMIENIAC ID');
        END IF;
    END IF;
END;
/

---------------------------
--USERS
---------------------------
--BOSS
/*CREATE USER boss IDENTIFIED BY boss1;
GRANT CONNECT, RESOURCE TO boss;
GRANT CREATE SESSION TO boss;
GRANT UNLIMITED TABLESPACE TO boss;
GRANT SELECT, UPDATE ON system.ASSORTYMENT TO boss;
GRANT SELECT, INSERT, UPDATE, DELETE ON system.BOOKS TO boss;
GRANT SELECT, INSERT, UPDATE, DELETE ON system.BOOKSHOPS TO boss;
GRANT SELECT, INSERT, UPDATE, DELETE ON system.CITY TO boss;
GRANT SELECT, INSERT, UPDATE ON system.CUSTOMERS TO boss;
GRANT SELECT, INSERT, UPDATE, DELETE ON system.EDUCATION TO boss;
GRANT SELECT, INSERT, UPDATE, DELETE ON system.HISTORY TO boss;
GRANT SELECT, INSERT, UPDATE, DELETE ON system.JOB_TITLES TO boss;
GRANT SELECT, INSERT, UPDATE, DELETE ON system.WORKERS TO boss;
GRANT SELECT ON system.LOG_TABLE_GENERAL TO boss;
GRANT SELECT ON system.LOG_TABLE_ASSORTYMENT TO boss;
GRANT SELECT ON system.LOG_TABLE_BOOKS TO boss;
GRANT SELECT ON system.LOG_TABLE_HISTORY TO boss;
GRANT SELECT ON system.LOG_TABLE_CUSTOMERS TO boss;

--MANAGER
CREATE USER manager IDENTIFIED BY manager1;
GRANT CONNECT TO manager;
GRANT CREATE SESSION TO manager;
GRANT UNLIMITED TABLESPACE TO manager;
GRANT SELECT, INSERT, UPDATE ON ASSORTYMENT TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON BOOKS TO manager;
GRANT SELECT, INSERT ON CITY TO manager;
GRANT SELECT, INSERT, UPDATE ON CUSTOMERS TO manager;
GRANT SELECT, INSERT, UPDATE ON JOB_TITLES TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON EDUCATION TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON HISTORY TO manager;
GRANT SELECT ON LOG_TABLE_GENERAL TO manager;
GRANT SELECT ON LOG_TABLE_ASSORTYMENT TO manager;
GRANT SELECT ON LOG_TABLE_BOOKS TO manager;
GRANT SELECT ON LOG_TABLE_HISTORY TO manager;
GRANT SELECT ON LOG_TABLE_CUSTOMERS TO manager;*/

------------------------
--INSERTING TO DATA BASE 
------------------------
INSERT INTO CITY(CITY_NAME) VALUES('WROCLAW');
INSERT INTO CITY(CITY_NAME) VALUES('KRAKOW');
INSERT INTO CITY(CITY_NAME) VALUES('RZESZOW');
INSERT INTO CITY(CITY_NAME) VALUES('GDANSK');
INSERT INTO CITY(CITY_NAME) VALUES('WARSZAWA');

INSERT INTO EDUCATION(LEVEL_OF_EDUCATION,ID_CITY) VALUES('SREDNIE',4);
INSERT INTO EDUCATION(LEVEL_OF_EDUCATION,ID_CITY) VALUES('WYSOKIE',2);
INSERT INTO EDUCATION(LEVEL_OF_EDUCATION,ID_CITY) VALUES('WYSOKIE',3);
INSERT INTO EDUCATION(LEVEL_OF_EDUCATION,ID_CITY) VALUES('SREDNIE',5);
INSERT INTO EDUCATION(LEVEL_OF_EDUCATION,ID_CITY) VALUES('WYSOKIE',1);

INSERT INTO BOOKSHOPS(SHOP_NAME,TEL_NUMBER,ID_CITY,STREET_NAME,BUILDING_NUMBER) VALUES('EMPIK','430141217',1,'POWSTANCOW SLASKICH',69);
INSERT INTO BOOKSHOPS(SHOP_NAME,TEL_NUMBER,ID_CITY,STREET_NAME,BUILDING_NUMBER) VALUES('MATRAS','187983944',1,'KRECZMERE',88);
INSERT INTO BOOKSHOPS(SHOP_NAME,TEL_NUMBER,ID_CITY,STREET_NAME,BUILDING_NUMBER) VALUES('BETA','251125446',2,'PIETRUCHY',666);
INSERT INTO BOOKSHOPS(SHOP_NAME,TEL_NUMBER,ID_CITY,STREET_NAME,BUILDING_NUMBER) VALUES('POD ARKADAMI','817688867',4,'PIETRUSZKI',420);
INSERT INTO BOOKSHOPS(SHOP_NAME,TEL_NUMBER,ID_CITY,STREET_NAME,BUILDING_NUMBER) VALUES('DOLNOSLASKA','125235445',5,'JANA PAWLA 2',2137);

INSERT INTO BOOKS(ID_BOOK,TITLE,AUTHOR,PUBLISHING_HOUSE,GENRE,PRICE) VALUES('9780316438971','MIASTO KOSCI','SLOTT DAN','SWPS','KRYMINAL',54);
INSERT INTO BOOKS(ID_BOOK,TITLE,AUTHOR,PUBLISHING_HOUSE,GENRE,PRICE) VALUES('9780316029186','IGRZYSKA SMIERCI','JORDAN PENNY','ABILION','PRZYGODOWA',50);
INSERT INTO BOOKS(ID_BOOK,TITLE,AUTHOR,PUBLISHING_HOUSE,GENRE,PRICE) VALUES('9780316389709','ZAKLINACZ CZASU','NORTON ANDRE','ACP','NAUKOWA',70);
INSERT INTO BOOKS(ID_BOOK,TITLE,AUTHOR,PUBLISHING_HOUSE,GENRE,PRICE) VALUES('9780316441636','MALY KSIAZE','LEM STANISLAW','ADAC','FANTASY',20);
INSERT INTO BOOKS(ID_BOOK,TITLE,AUTHOR,PUBLISHING_HOUSE,GENRE,PRICE) VALUES('9780316273831','WIEDZMIN','MAY KAROL','SUPERNOWA','NA FAKTACH',45);

INSERT INTO CUSTOMERS(FIRST_NAME,LAST_NAME,EMAIL,TEL_NUMBER,CARD) VALUES('ZACHARIASZ','DUDA','ZACHARIASZ.DUDA@GMAIL.COM','987654321','FALSE');
INSERT INTO CUSTOMERS(FIRST_NAME,LAST_NAME,EMAIL,TEL_NUMBER,CARD) VALUES('URJASZ','WISNIEWSKI','URJASZ.WISNIEWSKI@GMAIL.COM','724557224','TRUE');
INSERT INTO CUSTOMERS(FIRST_NAME,LAST_NAME,EMAIL,TEL_NUMBER,CARD) VALUES('ZOFIA','SOKOLOWSKA','ZOFIA.SOKOLOWSKA@GMAIL.COM','570863534','TRUE');
INSERT INTO CUSTOMERS(FIRST_NAME,LAST_NAME,EMAIL,TEL_NUMBER,CARD) VALUES('FELIKS','SOKOLOWSKI','FELIKS.SOKOLOWSKI@GMAIL.COM','488296813','TRUE');
INSERT INTO CUSTOMERS(FIRST_NAME,LAST_NAME,EMAIL,TEL_NUMBER,CARD) VALUES('SEWERYN','OLSZEWSKI','SEWERYN.OLSZEWSKI@GMAIL.COM','395306545','TRUE');

UPDATE ASSORTYMENT SET AMOUNT = 10;

INSERT INTO HISTORY(ID_CUSTOMER,ID_BOOKSHOP,ID_BOOK,PURCHASE_DATE) VALUES(1,1,'9780316273831',TO_DATE('10-04-2018','DD-MM-YYYY'));
INSERT INTO HISTORY(ID_CUSTOMER,ID_BOOKSHOP,ID_BOOK,PURCHASE_DATE) VALUES(2,1,'9780316273831',TO_DATE('05-02-2018','DD_MM-YYYY'));
INSERT INTO HISTORY(ID_CUSTOMER,ID_BOOKSHOP,ID_BOOK,PURCHASE_DATE) VALUES(3,2,'9780316389709',TO_DATE('03-04-2016','DD_MM-YYYY'));
INSERT INTO HISTORY(ID_CUSTOMER,ID_BOOKSHOP,ID_BOOK,PURCHASE_DATE) VALUES(4,5,'9780316389709',TO_DATE('15-08-2017','DD_MM-YYYY'));
INSERT INTO HISTORY(ID_CUSTOMER,ID_BOOKSHOP,ID_BOOK,PURCHASE_DATE) VALUES(4,4,'9780316438971',TO_DATE('20-06-2015','DD_MM-YYYY'));

INSERT INTO JOB_TITLES(JOB_TITLE,MIN_SALARY,MAX_SALARY,MIN_EDUCATION,MIN_EXPERIENCE) VALUES('MANAGER',4000,5000,'WYSOKIE',2);
INSERT INTO JOB_TITLES(JOB_TITLE,MIN_SALARY,MAX_SALARY,MIN_EDUCATION,MIN_EXPERIENCE) VALUES('SPRZEDAWCA',2000,4000,'SREDNIE',0);
INSERT INTO JOB_TITLES(JOB_TITLE,MIN_SALARY,MAX_SALARY,MIN_EDUCATION,MIN_EXPERIENCE) VALUES('MAGAZYNIER',2000,2500,'SREDNIE',0);
INSERT INTO JOB_TITLES(JOB_TITLE,MIN_SALARY,MAX_SALARY,MIN_EDUCATION,MIN_EXPERIENCE) VALUES('WLASCICIEL',10000,20000,'WYSOKIE',5);
INSERT INTO JOB_TITLES(JOB_TITLE,MIN_SALARY,MAX_SALARY,MIN_EDUCATION,MIN_EXPERIENCE) VALUES('ADMINISTRATOR',7000,10000,'WYSOKIE',3);

INSERT INTO WORKERS(ID_BOOKSHOP,ID_EDUCATION,ID_JOB_TITLE,SALARY,FIRST_NAME,LAST_NAME, EXPERIENCE) VALUES(1,1,1,4000,'URSZULA','WYSOCKA',2);
INSERT INTO WORKERS(ID_BOOKSHOP,ID_EDUCATION,ID_JOB_TITLE,SALARY,FIRST_NAME,LAST_NAME, EXPERIENCE) VALUES(1,2,2,3000,'GERWAZY','CZERWINSKI',1);
INSERT INTO WORKERS(ID_BOOKSHOP,ID_EDUCATION,ID_JOB_TITLE,SALARY,FIRST_NAME,LAST_NAME, EXPERIENCE) VALUES(2,1,3,2100,'LUCJUSZ','CZERWINSKI',0);
INSERT INTO WORKERS(ID_BOOKSHOP,ID_EDUCATION,ID_JOB_TITLE,SALARY,FIRST_NAME,LAST_NAME, EXPERIENCE) VALUES(3,4,2,3500,'ELA','MAJEWSKA',0);
INSERT INTO WORKERS(ID_BOOKSHOP,ID_EDUCATION,ID_JOB_TITLE,SALARY,FIRST_NAME,LAST_NAME, EXPERIENCE) VALUES(4,5,5,7500,'ANIA','OLSZEWSKA',4);
INSERT INTO WORKERS(ID_BOOKSHOP,ID_EDUCATION,ID_JOB_TITLE,SALARY,FIRST_NAME,LAST_NAME, EXPERIENCE) VALUES(5,3,4,12000,'PATRYCJA','CZARNECKA',7);


---------------------------
--TRIGGER FOR PURCHASE DATE
---------------------------
CREATE OR REPLACE TRIGGER PURCHASE_DATE
    BEFORE INSERT OR UPDATE
    ON HISTORY
    FOR EACH ROW
BEGIN
    :NEW.PURCHASE_DATE := SYSDATE;
END;
/




